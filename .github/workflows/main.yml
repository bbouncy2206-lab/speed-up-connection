name: RDP + SOCKS5 Proxy - Optimized
on:
  workflow_dispatch:

jobs:
  secure-rdp-proxy:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force

          # Configure firewall
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Optimize RDP Performance
        run: |
          # Optimisations RDP
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MaxMonitors" -Value 4
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MaxXResolution" -Value 1920
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MaxYResolution" -Value 1080
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "ColorDepth" -Value 32

          # D√©sactiver les effets visuels
          Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name "fDisableWallpaper" -Value 1
          Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name "fDisableFullWindowDrag" -Value 1
          Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name "fDisableMenuAnims" -Value 1
          Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name "fDisableCursorSetting" -Value 0

          # Am√©liorer la r√©activit√©
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MouseCursorHook" -Value 1

          Restart-Service -Name "TermService" -Force
          Restart-Service -Name "UmRdpService" -Force

      - name: Create RDP User with Secure Password
        run: |
          # Generate secure password
          $charSet = @{
              Upper   = [char[]](65..90)
              Lower   = [char[]](97..122)
              Number  = [char[]](48..57)
              Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          
          # Create user
          New-LocalUser -Name "RDPUser" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDPUser"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDPUser"
          
          # Store credentials
          echo "RDP_USER=RDPUser" >> $env:GITHUB_ENV
          echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV

      - name: Install and Configure Tailscale
        run: |
          # Download and install Tailscale - CORRIG√â
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process -FilePath "msiexec.exe" -ArgumentList "/i", "$installerPath", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force
          
          # Wait for installation to complete
          Start-Sleep -Seconds 15
          
          # Connect to Tailscale avec exit node
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=github-runner-$env:GITHUB_RUN_ID --accept-routes --advertise-exit-node

      - name: Setup SOCKS5 Proxy
        run: |
          # T√©l√©charger et installer un proxy SOCKS5 l√©ger
          $proxyUrl = "https://github.com/shadowsocks/shadowsocks-windows/releases/download/4.4.1.0/Shadowsocks-4.4.1.0.zip"
          $proxyPath = "$env:TEMP\ss.zip"
          
          Invoke-WebRequest -Uri $proxyUrl -OutFile $proxyPath
          Expand-Archive -Path $proxyPath -DestinationPath "C:\ss\" -Force
          Remove-Item $proxyPath -Force
          
          # Configuration automatique
          $config = @{
              server = "0.0.0.0"
              server_port = 1080
              local_port = 1080
              password = "proxy123"
              method = "chacha20-ietf-poly1305"
              timeout = 300
          } | ConvertTo-Json | Out-File "C:\ss\config.json" -Encoding ascii
          
          # D√©marrer le proxy
          Start-Process -FilePath "C:\ss\shadowsocks.exe" -ArgumentList "-c", "config.json" -WorkingDirectory "C:\ss"
          
          echo "SOCKS5_PASSWORD=proxy123" >> $env:GITHUB_ENV

      - name: Get Connection Information
        run: |
          $retries = 0
          $maxRetries = 10
          $tsIP = $null
          
          while (-not $tsIP -and $retries -lt $maxRetries) {
              Start-Sleep -Seconds 5
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              $retries++
              Write-Host "Attempt $retries: $tsIP"
          }
          
          if (-not $tsIP) {
              Write-Error "Failed to get Tailscale IP"
              exit 1
          }
          
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Display Connection Information
        run: |
          Write-Host ""
          Write-Host "================================================"
          Write-Host "üöÄ RDP + SOCKS5 PROXY READY - OPTIMIZED"
          Write-Host "================================================"
          Write-Host "üì° RDP Access:"
          Write-Host "   IP Address: $env:TAILSCALE_IP"
          Write-Host "   Username: $env:RDP_USER"
          Write-Host "   Password: $env:RDP_PASSWORD"
          Write-Host ""
          Write-Host "üîå SOCKS5 Proxy:"
          Write-Host "   Server: $env:TAILSCALE_IP"
          Write-Host "   Port: 1080"
          Write-Host "   Password: $env:SOCKS5_PASSWORD"
          Write-Host ""
          Write-Host "üåê Exit Node:"
          Write-Host "   tailscale up --exit-node=$env:TAILSCALE_IP --reset"
          Write-Host "================================================"
          Write-Host ""

      - name: Keep Session Active
        run: |
          Write-Host "‚úÖ RDP + Proxy Session Active"
          Write-Host "Press 'Cancel' in GitHub to terminate"
          
          $counter = 0
          while ($true) {
              $counter++
              $currentTime = Get-Date -Format "HH:mm:ss"
              if ($counter % 10 -eq 0) {
                  Write-Host "[$currentTime] Session active - $counter minutes"
                  # V√©rifier que le proxy tourne toujours
                  $proxyProcess = Get-Process -Name "shadowsocks" -ErrorAction SilentlyContinue
                  if (-not $proxyProcess) {
                      Write-Host "üîÑ Restarting SOCKS5 proxy..."
                      Start-Process -FilePath "C:\ss\shadowsocks.exe" -ArgumentList "-c", "config.json" -WorkingDirectory "C:\ss"
                  }
              }
              Start-Sleep -Seconds 60
          }
